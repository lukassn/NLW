"use strict";
// Based on
// Type definitions for sqlite3 3.1
// Project: http://github.com/mapbox/node-sqlite3
// Definitions by: Nick Malaguti <https://github.com/nmalaguti>
//                 Sumant Manne <https://github.com/dpyro>
//                 Behind The Math <https://github.com/BehindTheMath>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const sqlite3_1 = __importDefault(require("sqlite3"));
exports.OPEN_READONLY = sqlite3_1.default.OPEN_READONLY;
exports.OPEN_READWRITE = sqlite3_1.default.OPEN_READWRITE;
exports.OPEN_CREATE = sqlite3_1.default.OPEN_CREATE;
exports.OPEN_SHAREDCACHE = sqlite3_1.default.OPEN_SHAREDCACHE;
exports.OPEN_PRIVATECACHE = sqlite3_1.default.OPEN_PRIVATECACHE;
exports.OPEN_URI = sqlite3_1.default.OPEN_URI;
exports.cached = sqlite3_1.default.cached;
const Statement = sqlite3_1.default.Statement;
const Database = sqlite3_1.default.Database;
try {
    const { promisifyAll } = require('bluebird');
    promisifyAll(sqlite3_1.default.Database);
    promisifyAll(sqlite3_1.default.Database.prototype);
}
catch (_) {
    const { promisifyAll } = require('./promisify-all');
    promisifyAll(sqlite3_1.default.Database);
    promisifyAll(sqlite3_1.default.Database.prototype);
}
sqlite3_1.default.open = function () {
    return new Database(arguments);
};
sqlite3_1.default.openAsync = function () {
    return new Promise((resolve, reject) => {
        const db = new Database(...arguments, (err) => err ? reject(err) : resolve(db));
    });
};
exports.default = sqlite3_1.default;
