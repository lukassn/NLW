/// <reference types="node" />
import events from 'events';
export declare const OPEN_READONLY: number;
export declare const OPEN_READWRITE: number;
export declare const OPEN_CREATE: number;
export declare const OPEN_SHAREDCACHE: number;
export declare const OPEN_PRIVATECACHE: number;
export declare const OPEN_URI: number;
export declare const cached: {
    Database(filename: string, callback?: (this: Database, err: Error | null) => void): Database;
    Database(filename: string, mode?: number, callback?: (this: Database, err: Error | null) => void): Database;
};
export interface RunResult extends Statement {
    lastID: number;
    changes: number;
}
export interface Statement {
    bind(callback?: (err: Error | null) => void): this;
    bind(...params: any[]): this;
    bindAsync(...params: any[]): Promise<void>;
    reset(callback?: (err: null) => void): this;
    resetAsync(): Promise<void>;
    finalize(callback?: (err: Error) => void): Database;
    finalizeAsync(): Promise<void>;
    run(callback?: (err: Error | null) => void): this;
    run(params: any, callback?: (this: RunResult, err: Error | null) => void): this;
    run(...params: any[]): this;
    runAsync(...params: any[]): Promise<void>;
    get(callback?: (err: Error | null, row?: any) => void): this;
    get(params: any, callback?: (this: RunResult, err: Error | null, row?: any) => void): this;
    get(...params: any[]): this;
    getAsync<R = any>(...params: any[]): Promise<R | undefined>;
    all(callback?: (err: Error | null, rows: any[]) => void): this;
    all(params: any, callback?: (this: RunResult, err: Error | null, rows: any[]) => void): this;
    all(...params: any[]): this;
    allAsync<R = any>(...params: any[]): Promise<R[]>;
    each(callback?: (err: Error | null, row: any) => void, complete?: (err: Error | null, count: number) => void): this;
    each(params: any, callback?: (this: RunResult, err: Error | null, row: any) => void, complete?: (err: Error | null, count: number) => void): this;
    each(...params: any[]): this;
}
export interface Database extends events.EventEmitter {
    close(callback?: (err: Error | null) => void): void;
    closeAsync(): Promise<void>;
    run(sql: string, callback?: (this: RunResult, err: Error | null) => void): this;
    run(sql: string, params: any, callback?: (this: RunResult, err: Error | null) => void): this;
    run(sql: string, ...params: any[]): this;
    runAsync(sql: string, ...params: any[]): Promise<void>;
    get(sql: string, callback?: (this: Statement, err: Error | null, row: any) => void): this;
    get(sql: string, params: any, callback?: (this: Statement, err: Error | null, row: any) => void): this;
    get(sql: string, ...params: any[]): this;
    getAsync<R = any>(sql: string, ...params: any[]): Promise<R>;
    all(sql: string, callback?: (this: Statement, err: Error | null, rows: any[]) => void): this;
    all(sql: string, params: any, callback?: (this: Statement, err: Error | null, rows: any[]) => void): this;
    all(sql: string, ...params: any[]): this;
    allAsync<R = any>(sql: string, ...params: any[]): Promise<R[]>;
    each(sql: string, callback?: (this: Statement, err: Error | null, row: any) => void, complete?: (err: Error | null, count: number) => void): this;
    each(sql: string, params: any, callback?: (this: Statement, err: Error | null, row: any) => void, complete?: (err: Error | null, count: number) => void): this;
    each(sql: string, ...params: any[]): this;
    exec(sql: string, callback?: (this: Statement, err: Error | null) => void): this;
    execAsync(sql: string): Promise<void>;
    prepare(sql: string, callback?: (this: Statement, err: Error | null) => void): Statement;
    prepare(sql: string, params: any, callback?: (this: Statement, err: Error | null) => void): Statement;
    prepare(sql: string, ...params: any[]): Statement;
    prepareAsync(sql: string, ...params: any[]): Promise<void>;
    serialize(callback?: () => void): void;
    parallelize(callback?: () => void): void;
    on(event: "trace", listener: (sql: string) => void): this;
    on(event: "profile", listener: (sql: string, time: number) => void): this;
    on(event: "error", listener: (err: Error) => void): this;
    on(event: "open" | "close", listener: () => void): this;
    on(event: string, listener: (...args: any[]) => void): this;
    configure(option: "busyTimeout", value: number): void;
    interrupt(): void;
}
export interface sqlite3 {
    OPEN_READONLY: number;
    OPEN_READWRITE: number;
    OPEN_CREATE: number;
    OPEN_SHAREDCACHE: number;
    OPEN_PRIVATECACHE: number;
    OPEN_URI: number;
    cached: typeof cached;
    RunResult: RunResult;
    Statement: Statement;
    Database: Database;
    verbose(): this;
    open(filename: string, callback?: (err: Error | null) => void): Database;
    open(filename: string, mode?: number, callback?: (err: Error | null) => void): Database;
    openAsync(filename: string, mode?: number): Promise<Database>;
}
declare const _default: sqlite3;
export default _default;
//# sourceMappingURL=index.d.ts.map